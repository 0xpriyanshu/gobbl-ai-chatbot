{% comment %}
  @name Gobbl Chat Widget
  @description Adds the Gobbl AI Chatbot to your store with preâ€‘authentication and logs user data.
{% endcomment %}

{% if customer %}
  {% assign auth_token = customer.auth_token %}
  {% assign customer_data = customer | json %}
{% else %}
  {% assign auth_token = "" %}
  {% assign customer_data = "{}" %}
{% endif %}

{% comment %} Try different ways to get the access token {% endcomment %}
{% assign gobbl_token = shop.metafields.gobbl.access_token %}
{% assign gobbl_ai_token = shop.metafields.gobbl_ai.access_token %}
{% assign shop_token = shop.access_token %}

{% comment %} Log token sources in HTML comments for debugging {% endcomment %}
<!-- 
DEBUG INFO:
gobbl_token: {{ gobbl_token }}
gobbl_ai_token: {{ gobbl_ai_token }}
shop_token: {{ shop_token }}
-->

{% assign access_token = gobbl_token | default: gobbl_ai_token | default: shop_token | default: "" %}

<div id="gobbl-chat-container" 
     data-shop-domain="{{ shop.permanent_domain }}" 
     data-access-token="{{ access_token }}"
     data-gobbl-token="{{ gobbl_token }}"
     data-gobbl-ai-token="{{ gobbl_ai_token }}"
     data-shop-token="{{ shop_token }}">
</div>

{% schema %}
{
  "name": "Gobbl AI Chatbot",
  "target": "body",
  "settings": [
    {
      "type": "color",
      "id": "chat_icon_color",
      "label": "Chat Icon Color",
      "default": "#fb923c"
    },
    {
      "type": "range",
      "id": "chat_widget_width",
      "label": "Chat Widget Width (Desktop)",
      "min": 300,
      "max": 600,
      "step": 50,
      "default": 400
    },
    {
      "type": "range",
      "id": "chat_widget_height",
      "label": "Chat Widget Height (Desktop)",
      "min": 400,
      "max": 800,
      "step": 50,
      "default": 600
    }
  ]
}
{% endschema %}

<style>
  /* Chat icon */
  #chatIcon {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 60px;
    height: 60px;
    background: {{ block.settings.chat_icon_color }};
    border-radius: 50%;
    cursor: pointer;
    z-index: 9998;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 12px rgba(0,0,0,0.25);
    transition: all 0.3s ease;
  }

  /* Chatbot iframe */
  #chatbotIframe {
    position: fixed;
    border: none;
    border-radius: 12px;
    z-index: 999999;
    display: none;
    box-shadow: 0 5px 25px rgba(0,0,0,0.2);
    transition: all 0.3s ease;
  }

  /* Chatbot close button */
  #chatbotCloseBtn {
    position: fixed;
    width: 36px;
    height: 36px;
    background: {{ block.settings.chat_icon_color }};
    border-radius: 50%;
    cursor: pointer;
    z-index: 1000000;
    display: none;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-weight: bold;
    color: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: all 0.3s ease;
  }

  /* Debug panel */
  #gobbl-debug-panel {
    position: fixed;
    top: 10px;
    left: 10px;
    width: 400px;
    max-height: 300px;
    overflow-y: auto;
    background: #fff;
    border: 1px solid #ccc;
    padding: 10px;
    z-index: 1000002;
    font-family: monospace;
    font-size: 12px;
    line-height: 1.4;
    display: none;
  }

  /* Design mode dynamic links */
  .gobbl-dynamic-link {
    position: fixed;
    top: 50px;
    background: #fff;
    border: 1px solid #ccc;
    padding: 8px 12px;
    font-size: 14px;
    z-index: 1000001;
    text-decoration: none;
    color: #333;
  }
  #onboardingLink { left: 10px; }
  #debugToggleLink { left: 150px; }

  /* Mobile styles */
  @media screen and (max-width: 767px) {
    #chatbotIframe.mobile-open {
      width: 100% !important;
      height: 100% !important;
      bottom: 0 !important;
      right: 0 !important;
      border-radius: 0 !important;
    }
    #chatbotCloseBtn.mobile-visible {
      top: 15px !important;
      right: 15px !important;
      left: auto !important;
      transform: none !important;
      position: fixed !important;
      z-index: 1000000 !important;
    }
  }
</style>

<script>
(function(){
  // Create debug panel
  var debugPanel = document.createElement('div');
  debugPanel.id = 'gobbl-debug-panel';
  document.body.appendChild(debugPanel);
  
  // Helper function to log to debug panel
  function logDebug(message) {
    console.log('[GOBBL DEBUG]', message);
    var logEntry = document.createElement('div');
    logEntry.textContent = new Date().toISOString().slice(11, 19) + ': ' + message;
    debugPanel.appendChild(logEntry);
    // Auto-scroll to bottom
    debugPanel.scrollTop = debugPanel.scrollHeight;
  }

  // Try to get the access token from different sources
  var containerElement = document.getElementById('gobbl-chat-container');
  
  logDebug('Initializing Gobbl Chat Widget...');
  
  if (!containerElement) {
    logDebug('ERROR: Could not find gobbl-chat-container element');
    return;
  }
  
  var gobblToken = containerElement.getAttribute('data-gobbl-token');
  var gobblAiToken = containerElement.getAttribute('data-gobbl-ai-token');
  var shopToken = containerElement.getAttribute('data-shop-token');
  var accessToken = containerElement.getAttribute('data-access-token');
  
  logDebug('Token sources:');
  logDebug('- gobbl.access_token: ' + (gobblToken ? 'Found (' + gobblToken.substring(0, 5) + '...)' : 'Not found'));
  logDebug('- gobbl_ai.access_token: ' + (gobblAiToken ? 'Found (' + gobblAiToken.substring(0, 5) + '...)' : 'Not found'));
  logDebug('- shop.access_token: ' + (shopToken ? 'Found (' + shopToken.substring(0, 5) + '...)' : 'Not found'));
  logDebug('- Final access_token: ' + (accessToken ? 'Using (' + accessToken.substring(0, 5) + '...)' : 'Not found'));

  var isMobile = window.innerWidth <= 767;
  
  // Create chat icon element
  var chatIcon = document.createElement('div');
  chatIcon.id = 'chatIcon';
  chatIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="#fff"><path d="M12 3C7.59 3 4 6.59 4 11c0 1.74.57 3.35 1.53 4.65L4 21l5.35-1.53A7.938 7.938 0 0 0 12 19c4.41 0 8-3.59 8-8s-3.59-8-8-8z"/></svg>';

  // Build the iframe URL for the chatbot
  var shopDomain = '{{ shop.permanent_domain }}';
  var iframeUrl = 'https://curatehome.vercel.app?shop=' + shopDomain;
  
  if (accessToken && accessToken.trim() !== '') {
    iframeUrl += '&accessToken=' + encodeURIComponent(accessToken);
    logDebug('Added accessToken to iframe URL');
  } else {
    logDebug('WARNING: No access token available to add to iframe URL');
  }
  
  {% if auth_token != "" %}
    iframeUrl += '&auth_token={{ auth_token }}';
    logDebug('Added customer auth_token to iframe URL');
  {% endif %}
  
  logDebug('Iframe URL: ' + iframeUrl);

  // Create the iframe for the chatbot window
  var iframe = document.createElement('iframe');
  iframe.id = 'chatbotIframe';
  iframe.src = iframeUrl;
  
  // Set initial iframe styles based on device type
  if (isMobile) {
    iframe.style.width = '100%';
    iframe.style.height = '100%';
    iframe.style.bottom = '0';
    iframe.style.right = '0';
    iframe.style.borderRadius = '0';
  } else {
    iframe.style.width = '{{ block.settings.chat_widget_width }}px';
    iframe.style.height = '{{ block.settings.chat_widget_height }}px';
    iframe.style.bottom = '80px';
    iframe.style.right = '20px';
  }

  // Create the chatbot close button
  var closeBtn = document.createElement('div');
  closeBtn.id = 'chatbotCloseBtn';
  closeBtn.innerHTML = '&#10005;';
  
  if (isMobile) {
    closeBtn.style.top = '15px';
    closeBtn.style.right = '15px';
    closeBtn.style.backgroundColor = '{{ block.settings.chat_icon_color }}';
  } else {
    closeBtn.style.top = '10px';
    closeBtn.style.right = '10px';
  }

  // Toggle display of chatbot iframe when clicking the chat icon
  chatIcon.addEventListener('click', function(){
    var isHidden = iframe.style.display === 'none';
    iframe.style.display = isHidden ? 'block' : 'none';
    closeBtn.style.display = isHidden ? 'flex' : 'none';
    if (isMobile && isHidden) {
      iframe.classList.add('mobile-open');
      closeBtn.classList.add('mobile-visible');
    }
    logDebug(isHidden ? 'Opened chat widget' : 'Closed chat widget');
  });

  // Close the chatbot when the close button is clicked
  closeBtn.addEventListener('click', function(){
    iframe.style.display = 'none';
    closeBtn.style.display = 'none';
    if (isMobile) {
      iframe.classList.remove('mobile-open');
      closeBtn.classList.remove('mobile-visible');
    }
    logDebug('Closed chat widget via close button');
  });

  // Update positions on window resize
  window.addEventListener('resize', function() {
    var wasMobile = isMobile;
    isMobile = window.innerWidth <= 767;
    if (wasMobile !== isMobile) {
      logDebug('Window resized, updating layout for ' + (isMobile ? 'mobile' : 'desktop'));
      if (isMobile) {
        if (iframe.style.display !== 'none') {
          iframe.classList.add('mobile-open');
          closeBtn.classList.add('mobile-visible');
          closeBtn.style.top = '15px';
          closeBtn.style.right = '15px';
          closeBtn.style.left = 'auto';
          closeBtn.style.transform = 'none';
        }
      } else {
        iframe.classList.remove('mobile-open');
        closeBtn.classList.remove('mobile-visible');
        iframe.style.width = '{{ block.settings.chat_widget_width }}px';
        iframe.style.height = '{{ block.settings.chat_widget_height }}px';
        iframe.style.bottom = '80px';
        iframe.style.right = '20px';
        closeBtn.style.top = '10px';
        closeBtn.style.right = '10px';
        closeBtn.style.left = 'auto';
        closeBtn.style.transform = 'none';
      }
    }
  });

  // Append the chat elements to the page
  document.body.appendChild(chatIcon);
  document.body.appendChild(iframe);
  document.body.appendChild(closeBtn);
  logDebug('Added chat elements to page');

  // When the iframe loads, post initial data to it
  iframe.addEventListener('load', function(){
    logDebug('Iframe loaded, sending data via postMessage');
    
    var messageData = {
      shop: shopDomain
    };
    
    if (accessToken && accessToken.trim() !== '') {
      messageData.accessToken = accessToken;
      logDebug('Including accessToken in postMessage data');
    } else {
      logDebug('WARNING: No access token to include in postMessage data');
    }
    
    {% if auth_token != "" %}
      messageData.auth_token = '{{ auth_token }}';
      logDebug('Including customer auth_token in postMessage data');
    {% endif %}
    
    logDebug('Sending postMessage to iframe with data: ' + JSON.stringify(messageData, function(key, value) {
      // Mask token values in logs
      if (key === 'accessToken' || key === 'auth_token') {
        return value.substring(0, 5) + '...';
      }
      return value;
    }));
    
    iframe.contentWindow.postMessage(messageData, 'https://curatehome.vercel.app');
  });

  // Function to fetch seller ID and redirect
  async function getSellerIdAndRedirect(accessToken) {
    if (!accessToken || accessToken.trim() === '') {
      logDebug('ERROR: Cannot get seller ID - no access token available');
      return false;
    }
    
    try {
      logDebug('Fetching seller ID from API using access token...');
      const apiUrl = `https://aggregator.gobbl.ai/api/shopify/getSellerId?accessToken=${encodeURIComponent(accessToken)}`;
      
      const response = await fetch(apiUrl);
      
      if (!response.ok) {
        throw new Error(`API request failed with status: ${response.status}`);
      }
      
      const data = await response.json();
      logDebug('API response received: ' + JSON.stringify(data));
      
      if (data && data.result) {
        const sellerId = data.result;
        logDebug(`Seller ID retrieved: ${sellerId}`);      
        
        // Redirect to onboarding with sellerId
        const redirectUrl = `https://onboarding.gobbl.ai/?sellerID=${encodeURIComponent(sellerId)}`;
        logDebug(`Redirecting to: ${redirectUrl}`);
        
        return redirectUrl;
      } else {
        logDebug('ERROR: No seller ID found in API response');
        return false;
      }
    } catch (error) {
      logDebug(`ERROR fetching seller ID: ${error.message}`);
      return false;
    }
  }

  // In design mode, add debugging tools
  if (window.Shopify && Shopify.designMode) {
    logDebug('Running in Shopify design mode, adding debug tools');
    
    // Create Onboarding link with access token
    var onboardingLink = document.createElement('a');
    onboardingLink.id = "onboardingLink";
    onboardingLink.href = "#";
    onboardingLink.textContent = "Gobbl Onboarding";
    onboardingLink.target = "_blank";
    onboardingLink.className = "gobbl-dynamic-link";
    
    // Add click handler to fetch sellerId and redirect
    onboardingLink.addEventListener('click', async function(e) {
      e.preventDefault();
      logDebug('Onboarding link clicked, getting seller ID...');
      
      if (accessToken && accessToken.trim() !== '') {
        const redirectUrl = await getSellerIdAndRedirect(accessToken);
        
        if (redirectUrl) {
          window.open(redirectUrl, '_blank');
        } else {
          // Fallback to direct access token link if seller ID fetch fails
          logDebug('Falling back to direct access token URL');
          window.open(`https://onboarding.gobbl.ai/?accessToken=${encodeURIComponent(accessToken)}`, '_blank');
        }
      } else {
        logDebug('ERROR: No access token available for onboarding');
        window.open('https://onboarding.gobbl.ai/', '_blank');
      }
    });
    
    document.body.appendChild(onboardingLink);
  }
})();
</script>

<script>
window.addEventListener("message", async (event) => {
  const { type, payload } = event.data || {};
  
  // Log incoming messages for debugging
  if (type) {
    const debugPanel = document.getElementById('gobbl-debug-panel');
    if (debugPanel) {
      const logEntry = document.createElement('div');
      logEntry.textContent = new Date().toISOString().slice(11, 19) + ': Received message: ' + type;
      debugPanel.appendChild(logEntry);
      debugPanel.scrollTop = debugPanel.scrollHeight;
    }
    console.log('[GOBBL DEBUG] Received message:', type, payload);
  }

  if (type === "ADD_TO_CART") {
    try {
      const res = await fetch("/cart/add.js", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        body: JSON.stringify({
          id: payload.id,
          quantity: payload.quantity || 1
        })
      });

      const added = await res.json();
      event.source.postMessage({ type: "CART_UPDATED", payload: added }, event.origin);
      console.log('[GOBBL DEBUG] Item added to cart:', added);

      const cartRes = await fetch("/cart.js");
      const cart = await cartRes.json();
      const count = cart.item_count;
      const el = document.querySelector(".cart-count");
      if (el) {
        el.textContent = count;
        el.classList.add("visible");
      }

      document.dispatchEvent(new Event("shopify:cart:updated"));
      document.dispatchEvent(new CustomEvent("cart:refresh"));

      if (window.Shopify && Shopify.theme && Shopify.theme.cartDrawer && typeof Shopify.theme.cartDrawer.fetchCart === 'function') {
        Shopify.theme.cartDrawer.fetchCart();
      }
    } catch (err) {
      console.error('[GOBBL DEBUG] Error adding to cart:', err);
      event.source.postMessage({ type: "CART_ERROR", payload: { message: err.message } }, event.origin);
    }
  }
});
</script>

<script>
  window.addEventListener('message', function(event) {
    if (event.data?.action === 'OPEN_CART') {
      console.log('[GOBBL DEBUG] Opening cart page');
      window.location.href = '/cart';
    }
  });
</script>